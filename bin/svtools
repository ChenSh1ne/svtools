#!/usr/bin/env python

##############################################################################
# svtools
# svtools command line interface.  
##############################################################################
import argparse, sys, re, os
import subprocess,shlex
from argparse import RawTextHelpFormatter
#sys.path.append(os.path.dirname(os.path.realpath(__file__)))
__author__ = "Hall-lab"
__version__ = "$Revision: 0.0.1 $"
__date__ = "$Date: 2015-10-14 14:31 $"
def svtools_help():
    program_name = "svtools"
    print program_name  + ": comprehensive utilities to explore structural variations in genomes.\n"
    print '\t' + __author__  
    print '\t' + __version__ 
    print '\t' + __date__    
    print  "\nusage:    svtools <subcommand> [options]"
    print  "The svtools sub-commands include:"
    print  "[ general utilities ]" 
    print  "  vcftobedpe      converts vcf file into bedpe."
    print  "  bedpetovcf      converts bedpe file to vcf."
    print  "  bedpetobed12    converts bedpe file to bed12."
    print  "  vcfsort         sorts a vcf file."
    print  "  bedpesort       sorts a bedpe file."
    print  "\n"
    print  "[ callset generation ]" 
    print  "  prune           cluster a BEDPE file by position based on allele frequency."
    print  "  varlookup       look for variants common between two bedpe files."
    print  "  afreq           add allele frequency information to a VCF file."
    print  "  lsort           sorts a vcf file by type."
    print  "  lmerge          merges multiple sorted vcf files."
    print  "  genotype        return a vcf file with genotype information added by svtyper."
    print  "  copynumber      add cn information using cnvnator."
    print  "  vcfpaste        combine multiple vcf files produced by genotype command."
    print  "  classify        classify structural variants"
    print  "\n"
    print  "[ General help ]"
    print  "  --help          print this help menu."
    print  "  --version       what version of svtools are you using?."
    print  "  --contact       feature requests, bugs, mailing lists, etc."
    return 0
    
    
def svtools_help_specialCases(sub_cmd):
    print "usage: svtools " + sub_cmd +  "Input[stdin] Output[stdout]\n"  \
    + sub_cmd + \
    "\n" \
    + "author: hall-lab\n" \
    + "version: $Revision: 0.0.1 $\n\n" \
    + "description: Sorts variant file\n#adapted from erik garrion's vcfsort (in vcflib)\n#https://github.com/ekg/vcflib/blob/master/bin/vcfsort\n\n" \
    + "Otional arguments:\n" \
    + "inputfile  [stdin]\n" \
    + "outputfile [stdout]\n" 
    
def main():
    #make sure the user at least entered a sub_command
    if len(sys.argv) < 2:
        svtools_help()
        sys.exit(0)
    sub_cmd = sys.argv[1]
    args = sys.argv[2:]
    #Add new command to this list
    svtoolset = ['vcftobedpe','bedpetovcf', 'bedpetobed12', 'bedpesort', 'vcfsort', 'prune','varlookup','classify','vcfpaste','genotype','copynumber', 'afreq','lmerge','lsort']
    #help
    if sub_cmd == "-h" or sub_cmd == "--help" or sub_cmd == "-help" or sub_cmd == "help":
        svtools_help()
        return 1
    #verison information
    if sub_cmd == "-version" or sub_cmd == "--version":
        print  "\n\tsvtools\t" + __version__ + '\n'
        return 1

    #version information
    if sub_cmd == "-contact" or sub_cmd == "--contact":
        print '\n'
        print "- For further help, or to report a bug, please\n"
        print "  email the svtools mailing list:\n"
        print "- The development repository can be found at:\n"
        print "     https://github.com/halllab/svtools\n"
    #general utilities
    if sub_cmd in svtoolset:
        if (sub_cmd == 'vcfsort' or sub_cmd == 'bedpesort') and os.isatty(0):
            svtools_help_specialCases(sub_cmd)
            return 1
        cmd = sub_cmd  + ' ' + ' '.join(args)
        p = subprocess.Popen(shlex.split(cmd),stderr=subprocess.STDOUT,shell=False)
        out, err = p.communicate()
        if err is not None:
            sys.stderr.write(err)
            return 1
    #unknown
    else:
        sys.stderr.write("\terror: unrecognized arguments:" + sys.argv[1] + '\n\n')
        svtools_help()
        return 1
# initialize the script
if __name__ == '__main__':
    try:
        sys.exit(main())
    except IOError, e:
        if e.errno != 32:  # ignore SIGPIPE
            raise

