#!/gscmnt/gc2719/halllab/bin/python
import sys
import getopt
import string
from optparse import OptionParser


class BEDPE (object):

    def __init__(self, bedList):
        self.c1 = bedList[0]
        self.s1 = int(bedList[1])
        self.e1 = int(bedList[2])
        self.c2 = bedList[3]
        self.s2 = int(bedList[4])
        self.e2 = int(bedList[5])
        self.name = bedList[6]
        self.score = bedList[7]
        self.o1 = bedList[8]		
        self.o2 = bedList[9]
        self.type = filter(lambda x: x if x.startswith('SVTYPE=') else None, bedList[12].split(";"))
        if self.type is not None and len(self.type) == 1:
            self.type=''.join(self.type).replace('SVTYPE=','')
        else:
            sys.stderr.write('\nError: invalid info field can\'t find SVTYPE field\n')
            sys.exit(1)    
        self.af=filter(lambda x: x if x.startswith('AF=') else None, bedList[12].split(";"))
        if self.af is not None and len(self.af) == 1:
            self.af=''.join(self.af).replace('AF=','')
def bedpeToBlockedBed(bedpe, dist):

    if (bedpe.type == "DEL") and (abs(bedpe.e2-bedpe.s1) <= dist): color = "153,0,0"    # deletion breakpoints are red
    elif (bedpe.type == "DUP") and (abs(bedpe.e2-bedpe.s1) <= dist) : color = "0,102,0"  # duplication breakpoints are green
    elif (bedpe.type == "INV") and (abs(bedpe.e2-bedpe.s1) <= dist) : color = "0,51,204"  # inversion breakpoints are blue
    elif (bedpe.type == "BND") or (abs(bedpe.e2-bedpe.s1) > dist): color = "204,204,204" # distant breakpoints are gray
    elif abs(bedpe.e2-bedpe.s1) <= dist:color="128,0,128" 
    if (bedpe.type != "BND") and (abs(bedpe.e2-bedpe.s1) <= dist):

        # print bedpe.c1 + "\t" + str(bedpe.s1) + "\t" + str(bedpe.e2) + "\t" + bedpe.type + "_" + bedpe.name + \
#         "\t" + str(bedpe.score) + "\t" + \
#         "+" + "\t" + str(bedpe.s1) + "\t" + str(bedpe.e2) + "\t" + color + "\t" + "2" + "\t" + \
#         str(bedpe.e1 - bedpe.s1) + "," +  str(bedpe.e2 - bedpe.s2) + "\t" + \
#         "0," +  str(bedpe.s2- bedpe.s1)
        if bedpe.af is not None:
            print '\t'.join(map(str, [bedpe.c1,bedpe.s1,bedpe.e2,''.join(map(str,[bedpe.type,';ID=',bedpe.name,';AF=',bedpe.af])),bedpe.score,'+',\
                            bedpe.s1,bedpe.e2,color,'2',','.join(map(str,[bedpe.e1-bedpe.s1,bedpe.e2-bedpe.s2])), ','.join(map(str,['0', bedpe.s2 - bedpe.s1]))]))
        else:
            print '\t'.join(map(str, [bedpe.c1,bedpe.s1,bedpe.e2,''.join(map(str,[bedpe.type,';ID=',bedpe.name])),bedpe.score,'+',\
                            bedpe.s1,bedpe.e2,color,'2',','.join(map(str,[bedpe.e1-bedpe.s1,bedpe.e2-bedpe.s2])), ','.join(map(str,['0', bedpe.s2 - bedpe.s1]))]))
    # intrachromosomals that exceed dist
    elif (bedpe.type != "BND") and (abs(bedpe.e2-bedpe.s1) > dist):
        if bedpe.o1 == "+":
            if bedpe.af is not None:
                print '\t'.join(map(str, [bedpe.c1,bedpe.s1,bedpe.e1+500,''.join(map(str,[bedpe.type,';ID=',bedpe.name,';AF=',bedpe.af])),bedpe.score,'+',\
                                bedpe.s1,bedpe.e1+500,color,'2',','.join(map(str,[bedpe.e1-bedpe.s1,1])), ','.join(map(str,[0, bedpe.e1 - bedpe.s1+500]))]))
            else:
                print '\t'.join(map(str, [bedpe.c1,bedpe.s1,bedpe.e1+500,''.join(map(str,[bedpe.type,';ID=',bedpe.name])),bedpe.score,'+',\
                                bedpe.s1,bedpe.e1+500,color,'2',','.join(map(str,[bedpe.e1-bedpe.s1,1])), ','.join(map(str,[0, bedpe.e1 - bedpe.s1+500]))]))
        if bedpe.o1 == "-":
            if bedpe.af is not None:
                print '\t'.join(map(str, [bedpe.c1,bedpe.s1-500,bedpe.e1,''.join(map(str,[bedpe.type,';ID=',bedpe.name,';AF=',bedpe.af])),bedpe.score,'-',\
                                bedpe.s1-500,bedpe.e1,color,'2',','.join(map(str,[1,bedpe.e1-bedpe.s1])), ','.join(map(str,[0, 500]))]))
            else:
                print '\t'.join(map(str, [bedpe.c1,bedpe.s1-500,bedpe.e1,''.join(map(str,[bedpe.type,';ID=',bedpe.name])),bedpe.score,'-',\
                                bedpe.s1-500,bedpe.e1,color,'2',','.join(map(str,[1,bedpe.e1-bedpe.s1])), ','.join(map(str,[0, 500]))]))
        if bedpe.o2 == "+":
            if bedpe.af is not None:
                print '\t'.join(map(str, [bedpe.c2,bedpe.s2,bedpe.e2+500,''.join(map(str,[bedpe.type,';ID=',bedpe.name,';AF=',bedpe.af])),bedpe.score,'+',\
                                bedpe.s2,bedpe.e2+500,color,'2',','.join(map(str,[bedpe.e2-bedpe.s2,1])), ','.join(map(str,[0, bedpe.e2-bedpe.s2+499]))]))
            else:
                print '\t'.join(map(str, [bedpe.c2,bedpe.s2,bedpe.e2+500,''.join(map(str,[bedpe.type,';ID=',bedpe.name])),bedpe.score,'+',\
                                bedpe.s2,bedpe.e2+500,color,'2',','.join(map(str,[bedpe.e2-bedpe.s2,1])), ','.join(map(str,[0, bedpe.e2-bedpe.s2+499]))]))
            
        if bedpe.o2 == "-":
            print bedpe.c2 + "\t" + str(bedpe.s2-500) + "\t" + str(bedpe.e2) + "\t"  + bedpe.type + "_" + bedpe.name + \
            "\t" + str(bedpe.score) + "\t" + \
            "-" + "\t" + str(bedpe.s2-500) + "\t" + str(bedpe.e2) + "\t" + color + "\t" + "2" + "\t" + \
            "1" + "," + str(bedpe.e2 - bedpe.s2) + "\t" + \
            "0," + str(500)
            if bedpe.af is not None:
                print '\t'.join(map(str, [bedpe.c2,bedpe.s2-500,bedpe.e2,''.join(map(str,[bedpe.type,';ID=',bedpe.name,';AF=',bedpe.af])),bedpe.score,'-',\
                                bedpe.s2-500,bedpe.e2,color,'2',','.join(map(str,[1,bedpe.e2-bedpe.s2,1])), ','.join(map(str,[0,500]))]))
            else:
                print '\t'.join(map(str, [bedpe.c2,bedpe.s2-500,bedpe.e2,''.join(map(str,[bedpe.type,';ID=',bedpe.name])),bedpe.score,'-',\
                                bedpe.s2-500,bedpe.e2,color,'2',','.join(map(str,[1,bedpe.e2-bedpe.s2,1])), ','.join(map(str,[0,500]))]))
    # BNDS:	
    elif (bedpe.type == "BND"):
        if bedpe.af is not None:
            print '\t'.join([bedpe.c1,str(bedpe.s1),str(bedpe.e1),''.join(["BND;ID=",bedpe.name,";AF=",bedpe.af,";STR=",bedpe.o1,bedpe.o2]), \
                            str(bedpe.score),bedpe.o1,str(bedpe.s1),str(bedpe.e1),"204,204,204"]) 
            print '\t'.join([bedpe.c2,str(bedpe.s2),str(bedpe.e2),''.join(["BND;ID=",bedpe.name,";AF=",bedpe.af,";STR=",bedpe.o1,bedpe.o2]),\
                            str(bedpe.score),bedpe.o2,str(bedpe.s2),str(bedpe.e2),"204,204,204"])
        else:
            print '\t'.join([bedpe.c1,str(bedpe.s1),str(bedpe.e1),''.join(["BND;ID=",bedpe.name,";STR=",bedpe.o1,bedpe.o2]),\
                            str(bedpe.score),bedpe.o1,str(bedpe.s1),str(bedpe.e1),"204,204,204"])
            print '\t'.join([bedpe.c2,str(bedpe.s2),str(bedpe.e2),''.join(["BND;ID=",bedpe.name,";STR=",bedpe.o1,bedpe.o2]),\
                            str(bedpe.score),bedpe.o2,str(bedpe.s2),str(bedpe.e2),"204,204,204"]) 
            
def processBEDPE(bedpeFile, name, dist):
    #Process the BEDPE file and convert each entry to SAM.
    if name is not None or bedpeFile == "stdin":
        writeTrackName(name)
    elif bedpeFile != "stdin":
        writeTrackName(bedpeFile.name)    
    if bedpeFile == "stdin":		
        for line in sys.stdin:
            # ignore header
            if line[0] == "#":
                continue
            lineList = line.strip().split()
            if (len(lineList) > 0):
                bedpe = BEDPE(lineList)
                bedpeToBlockedBed(bedpe, dist)
    else:
         for line in open(bedpeFile, 'r'):
             # ignore header
            if line[0] == "#":
                 continue
            lineList = line.strip().split()
            if (len(lineList) > 0):
                bedpe = BEDPE(lineList)
                bedpeToBlockedBed(bedpe, dist)



def writeTrackName(name):
    print "track name=" + name + " itemRgb=On"


def main():
        usage = """%prog -i <file> -n <name> -d <dist>
            bedpeToBed12 version 1.1
            Author: Aaron Quinlan & Ira Hall	
            Description: converts BEDPE to BED12 format for viewing in IGV or the UCSC browser.
            Last Modified: Sep. 29, 2015 (Added renewed visualization scheme- Abhijit Badve)
                """
        parser = OptionParser(usage)
        parser.add_option("-i", "--bedpe", dest="bedpe",
            help="BEDPE input file", metavar="FILE")
        parser.add_option("-n", "--name", default="BEDPE", dest="name", type="str",
                help="The name of the track.  Default is 'BEDPE'.",
                metavar="STR")
        parser.add_option("-d", "--maxdist", dest="dist", default = 1000000, type="int",
            help="The minimum distance for drawing intrachromosomal features as if they are interchromosomal (i.e., without a line spanning the two footprints). Default is 1Mb.",
            metavar="INT")
        (opts, args) = parser.parse_args()
        if opts.bedpe is None:
            parser.print_help()
            print
        else:
            processBEDPE(opts.bedpe, opts.name, opts.dist)
if __name__ == "__main__":
    main()
